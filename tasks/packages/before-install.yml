---
- name: Packages - Before install
  vars:
    task_file: "{{ role_path }}/tasks/packages/{{ ansible_pkg_mgr }}/before-install.yml"
  when: task_file is file
  ansible.builtin.include_tasks:
    file: "{{ task_file }}"

- name: Packages - Before install - Services
  when: not in_container
  block:
    - name: Packages - Before install - Get services facts
      ansible.builtin.service_facts:

    - name: Packages - Before install - Stop anoying services
      become: true
      ansible.builtin.service:
        name: "{{ service }}"
        state: stopped
        enabled: false
      vars:
        current_services: |
          {{
            ansible_facts.services |
            dict2items |
            json_query("[?value.status!='not-found'].key")
          }}
        services_keys: |
          {{
            supported_time_backends |
            dict2items |
            rejectattr('key', '==', time_backend_name) |
            map(attribute='value') |
            map(attribute='services') |
            flatten
          }}
      loop: |
        {{
          ( (services_keys | intersect(system_services_dict.keys()) | map('extract', system_services_dict))
          + (services_keys | difference(system_services_dict.keys()))
          ) | map('intersect', current_services) | flatten
        }}
      loop_control:
        loop_var: service

- name: Packages - Before install - Compute packages we need to uninstall
  vars:
    packages_keys: |
      {{
        supported_time_backends |
        dict2items |
        rejectattr('key', '==', time_backend_name) |
        map(attribute='key') |
        difference(masks.packages | default([]))
      }}
    packages: |
      {{
        (family_packages | default({})) |
        combine(distro_packages | default({}))
      }}
  ansible.builtin.set_fact:
    to_remove: |
      {{
        (
          (packages_keys | intersect(packages.keys()) | map('extract', packages))
        + (packages_keys | difference(packages.keys()))
        ) | flatten | unique | intersect(ansible_facts.packages.keys())
      }}

- name: Packages - Before install - Uninstall anoying packages
  when: to_remove | length > 0
  become: true
  ansible.builtin.package:
    name: "{{ to_remove }}"
    state: absent

- name: Packages - Before install - Reload packages list
  ansible.builtin.package_facts:
