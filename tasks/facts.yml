---
- name: Facts - Checks
  when: ansible_os_family is undefined
  ansible.builtin.fail:
    msg: Ansible facts must be gathered

- name: Facts - Local variables
  ansible.builtin.include_vars: "{{ item }}"
  with_fileglob:
    - "{{ role_path }}/vars/{{ ansible_pkg_mgr }}.yml"                                                         # apt,           dnf,          etc.
    - "{{ role_path }}/vars/{{ ansible_service_mgr }}.yml"                                                     # openrc
    - "{{ role_path }}/vars/{{ ansible_os_family | lower }}-like.yml"                                          # debian-like,   redhat-like,  etc.
    - "{{ role_path }}/vars/{{ ansible_distribution | lower }}.yml"                                            # debian,        fedora,       etc.
    - "{{ role_path }}/vars/{{ ansible_os_family | lower }}{{ ansible_distribution_major_version }}-like.yml"  # redhat7-like,  redhat8-like, etc.
    - "{{ role_path }}/vars/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}.yml"    # debian10,      debian11
    - "{{ role_path }}/vars/{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}.yml" # ubuntu-bionic, ubuntu-focal

- name: Facts - Global
  vars:
    packages_keys: |
      {{
        ( system_packages_add_by_key + users_shells
        + (current_profiles_values | selectattr('packages', 'defined') | map(attribute='packages'))
        + (current_network_types | selectattr('packages', 'defined') | map(attribute='packages'))
        + (system_manage_time | ternary([time_backend_name], []))
        + (system_packages_upgrade_unattended | ternary(['unattended-upgrades'], []))
        + (system_ca_certificates | length > 0) | ternary(['ca-certificates'], [])
        + (system_manage_storages | ternary(['parted'], []))
        + (system_manage_lvm | ternary(['lvm2'], []))
        + (system_manage_firewall | ternary(['firewalld'], []))
        ) | flatten | unique | difference(masks.packages | default([]))
      }}
    packages: |
      {{
        (family_packages | default({})) |
        combine(distro_packages | default({})) |
        combine(release_packages | default({}))
      }}
    services_keys: |
      {{
        ( (current_profiles_values | selectattr('services', 'defined') | map(attribute='services'))
        + (system_manage_time | ternary(time_backend.services, []))
        ) | flatten | unique
      }}
    services: |
      {{
        (family_services | default({})) |
        combine(distro_services | default({})) |
        combine(release_services | default({}))
      }}
  ansible.builtin.set_fact:
    cacheable: true
    system_mounts: |
      {{
        ((
          (
            (system_storages_partitions | selectattr('state', 'undefined')) +
            (system_storages_partitions | selectattr('state', 'defined') | selectattr('state', '==', 'present'))
          ) |
          to_json | from_json |
          community.general.json_query('[?mount].{
            fstype: not_null(fs_type, `ext4`),
            group: not_null(group, `root`),
            mode: not_null(mode, `0755`),
            owner: not_null(owner, `root`),
            path: mount,
            resize: not_null(resize, `true`),
            src: join(``, [device, to_string(not_null(number, `1`))])
          }')
        ) + (
          (
            (system_storages_lvol | selectattr('state', 'undefined')) +
            (system_storages_lvol | selectattr('state', 'defined') | selectattr('state', '==', 'present'))
          ) |
          to_json | from_json |
          community.general.json_query('[?mount].{
            fstype: not_null(fstype, `ext4`),
            group: not_null(group, `root`),
            mode: not_null(mode, `0755`),
            owner: not_null(owner, `root`),
            path: mount,
            resize: not_null(resizefs, `true`),
            src: join(`/`, [``, `dev`, `mapper`, join(`-`, [vg, lv])])
          }')
        )) | sort(attribute='path')
      }}
    system_packages: |
      {{
        ( system_packages_add_by_name
        + (packages_add_by_name | default([]))
        + (packages_keys | intersect(packages.keys()) | map('extract', packages))
        + (packages_keys | difference(packages.keys()))
        ) | flatten | sort | unique
      }}
    system_shells: "{{ users_shells }}"
    system_services_dict: "{{ services }}"
    system_services: |
      {{
        ( (services_keys | intersect(services.keys()) | map('extract', services))
        + (services_keys | difference(services.keys()))
        ) | flatten | sort | unique
      }}

- name: Facts - Installed packages
  ansible.builtin.package_facts:

- name: Facts - Autodetect installed kernel package
  when:
    - not in_container
    - ansible_pkg_mgr == 'portage'
    - system_portage_kernel == 'auto'
  vars:
    current_kernel: |
      {{
        ansible_facts.packages.values() |
        flatten |
        json_query("[?category=='sys-kernel' && (name.contains(@, '-kernel') || name.contains(@, '-sources'))]") |
        last
      }}
  ansible.builtin.set_fact:
    system_uptime: "{{ (ansible_date_time.epoch | int) - ansible_uptime_seconds }}"
    system_portage_kernel: "{{ current_kernel.name }}"
    system_portage_kernel_provider: |-
      {{
        current_kernel.name is match('.*-sources$') |
        ternary('genkernel', 'dist')
      }}
    cacheable: true
